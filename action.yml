name: 'Revoke SSH key authorization policy'
author: '@joshjohanning'
branding:
  icon: 'rotate-cw'
  color: 'green'
description: 'Revokes SSO authorization for SSH keys against an organization'
inputs:
  organization:
    description: 'The organization to check for SSO SSH keys'
    required: true
    default: '${{ github.repository_owner }}'
  github-token:
    description: 'The GitHub token to use for API calls (requiring org admin access)'
    required: true
  dry-run:
    description: 'The animal to return an emoji for'
    default: 'false'
    required: false
  create-issue:
    description: 'Create an issue notifying the user of the revoked SSH keys'
    default: 'false'
    required: false
  issue-repo:
    description: 'If create-issues is true, the repo to create the issue in'
    default: '${{ github.repository }}'
    required: false
runs:
  using: "composite"
  steps:
    - name: 'Check and revoke SSO authorization for SSH keys'
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
      run: | 
        echo "üîç Getting SSH key credential authorizations for org: ${{ inputs.organization }}"
        echo "üîç Dry run: ${{ inputs.dry-run }}"

        org="${{ inputs.organization }}"
        dry_run="${{ inputs.dry-run }}"
        create_issue="${{ inputs.create-issue }}"
        issue_repo="${{ inputs.issue-repo }}"

        # get credential authorizations for the org
        credentials=$(gh api --paginate "/orgs/${org}/credential-authorizations")

        # check if = []
        if [ "$credentials" == "[]" ]; then
            echo "‚ùóÔ∏è No credentials found for org: ${{ inputs.organization }} (double check the org name and that SSO is configured)"
            exit 0
        fi

        # Loop through the array in the JSON object
        for item in $(echo "${credentials}" | jq -r '.[] | @base64'); do
            # Decode the base64-encoded item and extract the necessary fields
            _jq() {
                echo "${item}" | base64 --decode | jq -r "${1}"
            }
            credential_type=$(_jq '.credential_type')
            if [ "$credential_type" == "SSH key" ]; then
                login=$(_jq '.login')
                credential_id=$(_jq '.credential_id')
                authorized_credential_title=$(_jq '.authorized_credential_title')
                fingerprint=$(_jq '.fingerprint')

                echo "‚ùå Revoking SSO access for SSH key:"
                echo "     - login: ${login}"
                echo "     - Credential ID: ${credential_id}"
                echo "     - SSH Key Title: ${authorized_credential_title}"
                echo "     - SSH Key Fingerprint: ${fingerprint}"
                echo -e "- ‚ùå Revoking SSO access for SSH key:\n  - login: \`${login}\`\n  - Credential ID: \`${credential_id}\`\n  - SSH Key Title: \`${authorized_credential_title}\`\n  - SSH Key Fingerprint: \`${fingerprint}\`" >> $GITHUB_STEP_SUMMARY


                if [ $dry_run == "false" ]; then
                    echo " ... revoking credential ..."
                    gh api -X DELETE "/orgs/${org}/credential-authorizations/${credential_id}"
                    if [ $create_issue == "true" ]; then
                        echo " ... creating issue ..."
                        curl -Ls -X POST \
                          -H "Accept: application/vnd.github+json" \
                          -H "Authorization: Bearer ${{ github.token}}" https://api.github.com/repos/${issue_repo}/issues \
                          -H "X-GitHub-Api-Version: 2022-11-28" \
                          -d "{\"title\":\"GitHub SSH key SSO authorization revoked: $login\",\"body\":\"@$login, your GitHub SSH key titled \`$authorized_credential_title\` with a fingerprint of \`$fingerprint\` has been revoked from accessing ${org}. Please use HTTPS or the \`gh cli\` to clone repositories instead.\",\"assignees\":[\"$login\"]}"
                    fi
                else
                    echo "     - ‚ö†Ô∏è DRY RUN: not revoking credential"
                fi
            fi
        done
